{
  "cells": [
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "# AzureML in a Day\n",
        "\n",
        "データサイエンティストがAzure Machine Learning (Azure ML)を使用してモデルをトレーニングし、その後予測にモデルを使用する方法を学びます。このチュートリアルでは、Azure MLの基本概念とその一般的な使用方法に慣れることができます。\n",
        "\n",
        "*トレーニングスクリプト*を実行するために*コマンドジョブ*を送信し、スクリプトを実行するために必要な*ジョブ環境*を設定する方法を学びます。\n",
        "\n",
        "トレーニングスクリプトはデータの準備を行い、その後モデルをトレーニングして登録します。モデルを取得したら、それを*エンドポイント*として*デプロイ*し、*推論*のためにエンドポイントを呼び出します。\n",
        "\n",
        "実行する手順は次の通りです：\n",
        "\n",
        "> * Azure MLワークスペースに接続する\n",
        "> * ジョブ環境を作成する\n",
        "> * トレーニングスクリプトを作成する\n",
        "> * 適切なジョブ環境で設定されたトレーニングスクリプトを実行するコマンドジョブを作成して実行する\n",
        "> * トレーニングスクリプトの出力を確認する\n",
        "> * 新しくトレーニングしたモデルをエンドポイントとしてデプロイする\n",
        "> * 推論のためにAzure MLエンドポイントを呼び出す"
      ],
      "metadata": {}
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## 前提条件\n",
        "\n",
        "* Azureサブスクリプション。Azureサブスクリプションをお持ちでない場合は、[無料アカウントを作成](https://aka.ms/AMLFree)してから始めてください。\n",
        "* Azure MLワークスペースの動作環境。ワークスペースはAzureポータル、Azure CLI、またはPython SDKを使用して作成できます。[詳しくはこちら](https://docs.microsoft.com/azure/machine-learning/how-to-manage-workspace?tabs=python)を参照してください。\n",
        "* Azure Machine Learning [ワークスペース]()\n",
        "* ワークスペースと計算インスタンス。これらは[クイックスタート: Azure Machine Learningの使い方を始める](https://docs.microsoft.com/azure/machine-learning/quickstart-create-resources#create-compute-instance)を完了することで作成できます。"
      ],
      "metadata": {}
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## ワークスペースに接続する\n",
        "\n",
        "コードに取り組む前に、Azure MLワークスペースに接続する必要があります。ワークスペースはAzure Machine Learningのトップレベルリソースであり、Azure Machine Learningを使用して作成するすべてのアーティファクトを一元的に管理する場所を提供します。\n",
        "\n",
        "ワークスペースへのアクセスには `DefaultAzureCredential` を使用します。\n",
        "`DefaultAzureCredential` は、ほとんどのAzure SDK認証シナリオを処理するために使用されます。\n",
        "\n",
        "もしうまくいかない場合は、他の利用可能な資格情報についてのリファレンスを参照してください: [資格情報の設定例](../../configuration.ipynb)、[azure-identityリファレンスドキュメント](https://docs.microsoft.com/python/api/azure-identity/azure.identity?view=azure-python)。"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Handle to the workspace\n",
        "from azure.ai.ml import MLClient\n",
        "\n",
        "# Authentication package\n",
        "from azure.identity import DefaultAzureCredential\n",
        "\n",
        "credential = DefaultAzureCredential()"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "credential",
        "gather": {
          "logged": 1720584592632
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "If you want to use a browser to login and authenticate, you can use the following code instead. In this example, you'll use the `DefaultAzureCredential`."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Handle to the workspace\n",
        "# from azure.ai.ml import MLClient\n",
        "\n",
        "# Authentication package\n",
        "# from azure.identity import InteractiveBrowserCredential\n",
        "# credential = InteractiveBrowserCredential()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "次のセルに、サブスクリプションID、リソースグループ名、およびワークスペース名を入力します。これらの値を見つけるには：\n",
        "\n",
        "Azure Machine Learning Studioの右上ツールバーで、ワークスペース名を選択します。\n",
        "ワークスペース、リソースグループ、サブスクリプションIDの値をコードにコピーします。\n",
        "一つの値をコピーしてエリアを閉じ、貼り付けた後、次の値を取得するために戻ってください。\n",
        "\n",
        "![image of workspace credentials](media\\find-credentials.png)"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Get a handle to the workspace\n",
        "ml_client = MLClient(\n",
        "    credential=credential,\n",
        "    subscription_id=\"<SUBSCRIPTION_ID>\",\n",
        "    resource_group_name=\"<RESOURCE_GROUP>\",\n",
        "    workspace_name=\"<AML_WORKSPACE_NAME>\",\n",
        ")"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "name": "ml_client",
        "gather": {
          "logged": 1720584745947
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "結果として、他のリソースやジョブを管理するために使用するワークスペースへのハンドラーが作成されます。\n",
        "\n",
        "> [!IMPORTANT]\n",
        "> MLClientを作成することは、ワークスペースへの接続を意味しません。クライアントの初期化は遅延評価され、最初の呼び出しが行われるまで待機します（以下のノートブックでは、ジョブ環境の作成時にこの呼び出しが行われます）。"
      ],
      "metadata": {}
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## ジョブ環境を作成する\n",
        "\n",
        "AzureMLジョブを実行するには、[環境](https://docs.microsoft.com/azure/machine-learning/concept-environments)が必要です。環境は、トレーニングを行うコンピュート上にインストールしたいソフトウェアランタイムとライブラリをリストアップします。これはローカルマシン上のPython環境に似ています。\n",
        "\n",
        "AzureMLは、多くのキュレーション済みまたは既製の環境を提供しており、一般的なトレーニングや推論のシナリオに役立ちます。また、DockerイメージやConda構成を使用して独自のカスタム環境を作成することもできます。\n",
        "\n",
        "この例では、Conda yamlファイルを使用してジョブのカスタムConda環境を作成します。\n",
        "\n",
        "まず、ファイルを保存するディレクトリを作成します。"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "dependencies_dir = \"./dependencies\"\n",
        "os.makedirs(dependencies_dir, exist_ok=True)"
      ],
      "outputs": [],
      "execution_count": 3,
      "metadata": {
        "name": "dependencies_dir",
        "gather": {
          "logged": 1720584906256
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "次に、dependenciesディレクトリにファイルを作成します。下のセルは、IPythonマジックでファイルを作成したディレクトリに書き込んでいます。"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile {dependencies_dir}/conda.yaml\n",
        "name: model-env\n",
        "channels:\n",
        "  - conda-forge\n",
        "dependencies:\n",
        "  - python=3.8\n",
        "  - numpy=1.21.2\n",
        "  - pip=21.2.4\n",
        "  - scikit-learn=0.24.2\n",
        "  - scipy=1.7.1\n",
        "  - pandas>=1.1,<1.2\n",
        "  - pip:\n",
        "    - inference-schema[numpy-support]==1.3.0\n",
        "    - xlrd==2.0.1\n",
        "    - mlflow== 1.26.1\n",
        "    - azureml-mlflow==1.42.0\n",
        "    - mlflow-skinny==2.3.2\n",
        "    - psutil>=5.8,<5.9\n",
        "    - tqdm>=4.59,<4.60\n",
        "    - ipykernel~=6.0\n",
        "    - matplotlib"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Overwriting ./dependencies/conda.yaml\n"
        }
      ],
      "execution_count": 25,
      "metadata": {
        "name": "write_model"
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "このyamlファイルに指定した定義に従って、ワークスペースにカスタム環境を作成および登録します："
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azure.ai.ml.entities import Environment\n",
        "\n",
        "custom_env_name = \"aml-scikit-learn\"\n",
        "\n",
        "pipeline_job_env = Environment(\n",
        "    name=custom_env_name,\n",
        "    description=\"Custom environment for Credit Card Defaults pipeline\",\n",
        "    conda_file=os.path.join(dependencies_dir, \"conda.yaml\"),\n",
        "    image=\"mcr.microsoft.com/azureml/openmpi4.1.0-ubuntu20.04:latest\",\n",
        ")\n",
        "pipeline_job_env = ml_client.environments.create_or_update(pipeline_job_env)\n",
        "\n",
        "print(\n",
        "    f\"Environment with name {pipeline_job_env.name} is registered to workspace, the environment version is {pipeline_job_env.version}\"\n",
        ")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Environment with name aml-scikit-learn is registered to workspace, the environment version is 5\n"
        }
      ],
      "execution_count": 26,
      "metadata": {
        "name": "custom_env_name",
        "gather": {
          "logged": 1720590468922
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## コマンドジョブとは？\n",
        "\n",
        "Azure MLの*コマンドジョブ*を作成して、クレジットデフォルト予測のモデルをトレーニングします。コマンドジョブは、指定された環境でサーバーレスコンピュート上で*トレーニングスクリプト*を実行するために使用されます。環境はすでに作成済みですので、次にトレーニングスクリプトを作成します。\n",
        "\n",
        "*トレーニングスクリプト*は、データの準備、トレーニング、およびトレーニング済みモデルの登録を行います。このチュートリアルでは、Pythonのトレーニングスクリプトを作成します。\n",
        "\n",
        "コマンドジョブはCLI、Python SDK、またはスタジオインターフェースから実行できます。このチュートリアルでは、Azure ML Python SDK v2を使用してコマンドジョブを作成および実行します。\n",
        "\n",
        "トレーニングジョブの実行後、モデルをデプロイし、予測を行います。"
      ],
      "metadata": {}
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## トレーニングスクリプトを作成する\n",
        "\n",
        "まず、トレーニングスクリプトである*main.py*というPythonファイルを作成します。\n",
        "\n",
        "最初に、スクリプトのためのソースフォルダを作成します。"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "train_src_dir = \"./src\"\n",
        "os.makedirs(train_src_dir, exist_ok=True)"
      ],
      "outputs": [],
      "execution_count": 6,
      "metadata": {
        "name": "train_src_dir",
        "gather": {
          "logged": 1720585374009
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "このスクリプトは、データの前処理を行い、それをテストデータとトレーニングデータに分割します。その後、このデータを使用してツリーベースのモデルをトレーニングし、出力モデルを返します。\n",
        "\n",
        "パイプライン実行中にパラメーターとメトリクスをログするために、[MLFlow](https://learn.microsoft.com/azure/machine-learning/how-to-log-mlflow-models)を使用します。\n",
        "\n",
        "以下のセルでは、IPythonのマジックコマンドを使用して、トレーニングスクリプトを先ほど作成したディレクトリに書き込みます。"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile {train_src_dir}/main.py\n",
        "import os\n",
        "import argparse\n",
        "import pandas as pd\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "def main():\n",
        "    \"\"\"Main function of the script.\"\"\"\n",
        "\n",
        "    # input and output arguments\n",
        "    parser = argparse.ArgumentParser()\n",
        "    parser.add_argument(\"--data\", type=str, help=\"path to input data\")\n",
        "    parser.add_argument(\"--test_train_ratio\", type=float, required=False, default=0.25)\n",
        "    parser.add_argument(\"--n_estimators\", required=False, default=100, type=int)\n",
        "    parser.add_argument(\"--learning_rate\", required=False, default=0.1, type=float)\n",
        "    parser.add_argument(\"--registered_model_name\", type=str, help=\"model name\")\n",
        "    args = parser.parse_args()\n",
        "   \n",
        "    # Start Logging\n",
        "    mlflow.start_run()\n",
        "\n",
        "    # enable autologging\n",
        "    mlflow.sklearn.autolog()\n",
        "\n",
        "    ###################\n",
        "    #<prepare the data>\n",
        "    ###################\n",
        "    print(\" \".join(f\"{k}={v}\" for k, v in vars(args).items()))\n",
        "\n",
        "    print(\"input data:\", args.data)\n",
        "    \n",
        "    credit_df = pd.read_csv(args.data, header=1, index_col=0)\n",
        "\n",
        "    mlflow.log_metric(\"num_samples\", credit_df.shape[0])\n",
        "    mlflow.log_metric(\"num_features\", credit_df.shape[1] - 1)\n",
        "\n",
        "    train_df, test_df = train_test_split(\n",
        "        credit_df,\n",
        "        test_size=args.test_train_ratio,\n",
        "    )\n",
        "    ####################\n",
        "    #</prepare the data>\n",
        "    ####################\n",
        "\n",
        "    ##################\n",
        "    #<train the model>\n",
        "    ##################\n",
        "    # Extracting the label column\n",
        "    y_train = train_df.pop(\"default payment next month\")\n",
        "\n",
        "    # convert the dataframe values to array\n",
        "    X_train = train_df.values\n",
        "\n",
        "    # Extracting the label column\n",
        "    y_test = test_df.pop(\"default payment next month\")\n",
        "\n",
        "    # convert the dataframe values to array\n",
        "    X_test = test_df.values\n",
        "\n",
        "    print(f\"Training with data of shape {X_train.shape}\")\n",
        "\n",
        "    clf = GradientBoostingClassifier(\n",
        "        n_estimators=args.n_estimators, learning_rate=args.learning_rate\n",
        "    )\n",
        "    clf.fit(X_train, y_train)\n",
        "\n",
        "    y_pred = clf.predict(X_test)\n",
        "\n",
        "    print(classification_report(y_test, y_pred))\n",
        "    ###################\n",
        "    #</train the model>\n",
        "    ###################\n",
        "\n",
        "    ##########################\n",
        "    #<save and register model>\n",
        "    ##########################\n",
        "    # Registering the model to the workspace\n",
        "    print(\"Registering the model via MLFlow\")\n",
        "    mlflow.sklearn.log_model(\n",
        "        sk_model=clf,\n",
        "        registered_model_name=args.registered_model_name,\n",
        "        artifact_path=args.registered_model_name,\n",
        "    )\n",
        "\n",
        "    # Saving the model to a file\n",
        "    mlflow.sklearn.save_model(\n",
        "        sk_model=clf,\n",
        "        path=os.path.join(args.registered_model_name, \"trained_model\"),\n",
        "    )\n",
        "    ###########################\n",
        "    #</save and register model>\n",
        "    ###########################\n",
        "    \n",
        "    # Stop Logging\n",
        "    mlflow.end_run()\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Overwriting ./src/main.py\n"
        }
      ],
      "execution_count": 29,
      "metadata": {
        "name": "write_main"
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "このスクリプトでは、モデルがトレーニングされると、モデルファイルが保存され、ワークスペースに登録されます。これで、登録されたモデルを推論エンドポイントで使用できるようになります。\n",
        "\n",
        "## コマンドの設定\n",
        "\n",
        "必要なタスクを実行できるスクリプトが作成できたので、コマンドラインアクションを実行できる汎用的な**コマンド**を使用します。このコマンドラインアクションは、システムコマンドを直接呼び出すか、スクリプトを実行することで実現できます。\n",
        "\n",
        "ここでは、入力データ、分割比率、学習率、および登録されたモデル名を指定するための入力変数を作成します。コマンドスクリプトは次のことを行います：\n",
        "* 以前に作成した環境を使用します。コマンドを実行する際に最新バージョンの環境を示すために `@latest` 表記を使用できます。\n",
        "* 表示名、実験名などのメタデータを設定します。*実験*は、特定のプロジェクトに対して行うすべてのイテレーションのコンテナです。同じ実験名で送信されたすべてのジョブは、Azure ML Studioで隣り合わせにリストされます。\n",
        "* コマンドラインアクション自体を設定します - この場合は `python main.py` です。入力/出力は `${{ ... }}` 表記でコマンド内でアクセスできます。\n",
        "* このサンプルでは、インターネット上のファイルからデータにアクセスします。"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azure.ai.ml import command\n",
        "from azure.ai.ml import Input\n",
        "\n",
        "registered_model_name = \"credit_defaults_model\"\n",
        "\n",
        "job = command(\n",
        "    inputs=dict(\n",
        "        data=Input(\n",
        "            type=\"uri_file\",\n",
        "            path=\"https://azuremlexamples.blob.core.windows.net/datasets/credit_card/default%20of%20credit%20card%20clients.csv\",\n",
        "        ),\n",
        "        test_train_ratio=0.2,\n",
        "        learning_rate=0.25,\n",
        "        registered_model_name=registered_model_name,\n",
        "    ),\n",
        "    code=\"./src/\",  # location of source code\n",
        "    command=\"python main.py --data ${{inputs.data}} --test_train_ratio ${{inputs.test_train_ratio}} --learning_rate ${{inputs.learning_rate}} --registered_model_name ${{inputs.registered_model_name}}\",\n",
        "    environment=\"aml-scikit-learn@latest\", # Created at above cell\n",
        "    experiment_name=\"train_model_credit_default_prediction\",\n",
        "    display_name=\"credit_default_prediction\",\n",
        ")"
      ],
      "outputs": [],
      "execution_count": 30,
      "metadata": {
        "name": "registered_model_name",
        "gather": {
          "logged": 1720591214223
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## ジョブを送信する\n",
        "\n",
        "AzureMLで実行するためにジョブを送信する時が来ました。今回は、`ml_client.jobs` の `create_or_update` を使用します。"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "ml_client.create_or_update(job)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "\r\u001b[32mUploading src (0.0 MBs):   0%|          | 0/2905 [00:00<?, ?it/s]\r\u001b[32mUploading src (0.0 MBs): 100%|██████████| 2905/2905 [00:00<00:00, 123366.88it/s]\n\u001b[39m\n\n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 31,
          "data": {
            "text/plain": "Command({'parameters': {}, 'init': False, 'name': 'happy_heart_c5pmt7fn7l', 'type': 'command', 'status': 'Starting', 'log_files': None, 'description': None, 'tags': {}, 'properties': {'_azureml.ComputeTargetType': 'amlctrain', '_azureml.ClusterName': None, 'ContentSnapshotId': 'db28ae52-8c16-4cb0-80b4-2d8898ba39a4'}, 'print_as_yaml': False, 'id': '/subscriptions/f6ce1e2a-5984-4caf-a25c-b84249640c08/resourceGroups/aml-automl-handson/providers/Microsoft.MachineLearningServices/workspaces/aml-automl-handson-aml/jobs/happy_heart_c5pmt7fn7l', 'Resource__source_path': '', 'base_path': '/mnt/batch/tasks/shared/LS_root/mounts/clusters/hishida8/code/Users/hishida/azureml-in-a-day-jp/azureml-in-a-day', 'creation_context': <azure.ai.ml.entities._system_data.SystemData object at 0x7fd25c291840>, 'serialize': <msrest.serialization.Serializer object at 0x7fd25c291180>, 'allowed_keys': {}, 'key_restriction': False, 'logger': <TraceLogger attr_dict (WARNING)>, 'display_name': 'credit_default_prediction', 'experiment_name': 'train_model_credit_default_prediction', 'compute': None, 'services': {'Tracking': {'endpoint': 'azureml://eastus.api.azureml.ms/mlflow/v1.0/subscriptions/f6ce1e2a-5984-4caf-a25c-b84249640c08/resourceGroups/aml-automl-handson/providers/Microsoft.MachineLearningServices/workspaces/aml-automl-handson-aml?', 'type': 'Tracking'}, 'Studio': {'endpoint': 'https://ml.azure.com/runs/happy_heart_c5pmt7fn7l?wsid=/subscriptions/f6ce1e2a-5984-4caf-a25c-b84249640c08/resourcegroups/aml-automl-handson/workspaces/aml-automl-handson-aml&tid=16b3c013-d300-468d-ac64-7eda0820b6d3', 'type': 'Studio'}}, 'comment': None, 'job_inputs': {'data': {'type': 'uri_file', 'path': 'https://azuremlexamples.blob.core.windows.net/datasets/credit_card/default%20of%20credit%20card%20clients.csv', 'mode': 'ro_mount'}, 'test_train_ratio': '0.2', 'learning_rate': '0.25', 'registered_model_name': 'credit_defaults_model'}, 'job_outputs': {'default': {'type': 'uri_folder', 'path': 'azureml://datastores/workspaceartifactstore/ExperimentRun/dcid.happy_heart_c5pmt7fn7l', 'mode': 'rw_mount'}}, 'inputs': {'data': <azure.ai.ml.entities._job.pipeline._io.base.NodeInput object at 0x7fd25c2914e0>, 'test_train_ratio': <azure.ai.ml.entities._job.pipeline._io.base.NodeInput object at 0x7fd25c2912a0>, 'learning_rate': <azure.ai.ml.entities._job.pipeline._io.base.NodeInput object at 0x7fd25c291600>, 'registered_model_name': <azure.ai.ml.entities._job.pipeline._io.base.NodeInput object at 0x7fd25c2911e0>}, 'outputs': {'default': <azure.ai.ml.entities._job.pipeline._io.base.NodeOutput object at 0x7fd25c291480>}, 'component': CommandComponent({'latest_version': None, 'intellectual_property': None, 'auto_increment_version': True, 'source': 'REMOTE.WORKSPACE.JOB', 'is_anonymous': False, 'auto_delete_setting': None, 'name': 'happy_heart_c5pmt7fn7l', 'description': None, 'tags': {}, 'properties': {}, 'print_as_yaml': False, 'id': None, 'Resource__source_path': None, 'base_path': '/mnt/batch/tasks/shared/LS_root/mounts/clusters/hishida8/code/Users/hishida/azureml-in-a-day-jp/azureml-in-a-day', 'creation_context': <azure.ai.ml.entities._system_data.SystemData object at 0x7fd25c291840>, 'serialize': <msrest.serialization.Serializer object at 0x7fd25c2918a0>, 'command': 'python main.py --data ${{inputs.data}} --test_train_ratio ${{inputs.test_train_ratio}} --learning_rate ${{inputs.learning_rate}} --registered_model_name ${{inputs.registered_model_name}}', 'code': '/subscriptions/f6ce1e2a-5984-4caf-a25c-b84249640c08/resourceGroups/aml-automl-handson/providers/Microsoft.MachineLearningServices/workspaces/aml-automl-handson-aml/codes/8d5a307a-0875-4590-97df-203ac61153f1/versions/1', 'environment_variables': {}, 'environment': '/subscriptions/f6ce1e2a-5984-4caf-a25c-b84249640c08/resourceGroups/aml-automl-handson/providers/Microsoft.MachineLearningServices/workspaces/aml-automl-handson-aml/environments/aml-scikit-learn/versions/5', 'distribution': None, 'resources': None, 'queue_settings': None, 'version': None, 'schema': None, 'type': 'command', 'display_name': 'credit_default_prediction', 'is_deterministic': True, 'inputs': {'data': {'type': 'uri_file', 'path': 'https://azuremlexamples.blob.core.windows.net/datasets/credit_card/default%20of%20credit%20card%20clients.csv', 'mode': 'ro_mount'}, 'test_train_ratio': {'type': 'string', 'default': '0.2'}, 'learning_rate': {'type': 'string', 'default': '0.25'}, 'registered_model_name': {'type': 'string', 'default': 'credit_defaults_model'}}, 'outputs': {'default': {'type': 'uri_folder', 'path': 'azureml://datastores/workspaceartifactstore/ExperimentRun/dcid.happy_heart_c5pmt7fn7l', 'mode': 'rw_mount'}}, 'yaml_str': None, 'other_parameter': {'status': 'Starting', 'parameters': {}}, 'additional_includes': []}), 'referenced_control_flow_node_instance_id': None, 'kwargs': {'services': {'Tracking': {'endpoint': 'azureml://eastus.api.azureml.ms/mlflow/v1.0/subscriptions/f6ce1e2a-5984-4caf-a25c-b84249640c08/resourceGroups/aml-automl-handson/providers/Microsoft.MachineLearningServices/workspaces/aml-automl-handson-aml?', 'type': 'Tracking'}, 'Studio': {'endpoint': 'https://ml.azure.com/runs/happy_heart_c5pmt7fn7l?wsid=/subscriptions/f6ce1e2a-5984-4caf-a25c-b84249640c08/resourcegroups/aml-automl-handson/workspaces/aml-automl-handson-aml&tid=16b3c013-d300-468d-ac64-7eda0820b6d3', 'type': 'Studio'}}, 'status': 'Starting', 'creation_context': <azure.ai.ml.entities._system_data.SystemData object at 0x7fd25c291840>}, 'instance_id': '97bc6845-ce18-4f5d-9dcd-ee686d72cdd7', 'source': 'BUILDER', 'validate_required_input_not_provided': True, 'limits': None, 'identity': None, 'distribution': None, 'environment_variables': {}, 'environment': 'aml-scikit-learn:5', 'resources': {'instance_count': 1, 'shm_size': '2g'}, 'queue_settings': {'job_tier': 'standard'}, 'swept': False})",
            "text/html": "<table style=\"width:100%\"><tr><th>Experiment</th><th>Name</th><th>Type</th><th>Status</th><th>Details Page</th></tr><tr><td>train_model_credit_default_prediction</td><td>happy_heart_c5pmt7fn7l</td><td>command</td><td>Starting</td><td><a href=\"https://ml.azure.com/runs/happy_heart_c5pmt7fn7l?wsid=/subscriptions/f6ce1e2a-5984-4caf-a25c-b84249640c08/resourcegroups/aml-automl-handson/workspaces/aml-automl-handson-aml&amp;tid=16b3c013-d300-468d-ac64-7eda0820b6d3\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td></tr></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 31,
      "metadata": {
        "name": "create_job",
        "gather": {
          "logged": 1720591218713
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## ジョブの出力を確認し、ジョブの完了を待つ\n",
        "\n",
        "前のセルの出力にあるリンクを選択して、Azure ML Studioでジョブを確認します。\n",
        "\n",
        "このジョブの出力はAzure ML Studioで次のように表示されます。メトリクス、出力などの詳細を確認するには、各タブを探索してください。完了すると、ジョブはトレーニングの結果としてワークスペースにモデルを登録します。 \n",
        "\n",
        "![Screenshot that shows the job overview](media/view-job.gif \"View the job in studio\")\n",
        "\n",
        "> [!IMPORTANT]\n",
        "> Wait until the status of the job is complete before returning to this notebook to continue. The job will take 2 to 3 minutes to run. It could take longer (up to 10 minutes) if the compute has been scaled down to zero nodes and custom environment is still building.\n",
        "\n"
      ],
      "metadata": {}
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## モデルをオンラインエンドポイントとしてデプロイする\n",
        "\n",
        "機械学習モデルをAzureクラウドのWebサービス、つまり[`オンラインエンドポイント`](https://docs.microsoft.com/azure/machine-learning/concept-endpoints)としてデプロイします。\n",
        "\n",
        "機械学習サービスをデプロイするには通常、次のものが必要です：\n",
        "\n",
        "* デプロイしたいモデル資産（ファイル、メタデータ）。これらの資産はトレーニングジョブで既に登録済みです。\n",
        "* サービスとして実行するコード。コードは、指定された入力リクエストに対してモデルを実行します。このエントリースクリプトは、デプロイされたWebサービスに送信されたデータを受け取り、それをモデルに渡してからモデルの応答をクライアントに返します。スクリプトはモデルに特有のものです。エントリースクリプトは、モデルが期待するデータを理解し、モデルが返すデータを理解する必要があります。MLFlowモデルの場合、このチュートリアルのように、このスクリプトは自動的に作成されます。スコアリングスクリプトのサンプルは[こちら](https://github.com/Azure/azureml-examples/tree/sdk-preview/sdk/endpoints/online)にあります。"
      ],
      "metadata": {}
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## 新しいオンラインエンドポイントを作成する\n",
        "\n",
        "登録済みのモデルと推論スクリプトが揃ったので、オンラインエンドポイントを作成する時が来ました。エンドポイント名はAzureリージョン全体で一意である必要があります。このチュートリアルでは、`UUID`を使用して一意の名前を作成します。"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import uuid\n",
        "\n",
        "# Creating a unique name for the endpoint\n",
        "online_endpoint_name = \"credit-endpoint-\" + str(uuid.uuid4())[:8]"
      ],
      "outputs": [],
      "execution_count": 32,
      "metadata": {
        "name": "online_endpoint_name",
        "gather": {
          "logged": 1720591513427
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "> [!NOTE]\n",
        "> Expect the endpoint creation to take approximately 6 to 8 minutes."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azure.ai.ml.entities import (\n",
        "    ManagedOnlineEndpoint,\n",
        "    ManagedOnlineDeployment,\n",
        "    Model,\n",
        "    Environment,\n",
        ")\n",
        "\n",
        "# create an online endpoint\n",
        "endpoint = ManagedOnlineEndpoint(\n",
        "    name=online_endpoint_name,\n",
        "    description=\"this is an online endpoint\",\n",
        "    auth_mode=\"key\",\n",
        "    tags={\n",
        "        \"training_dataset\": \"credit_defaults\",\n",
        "        \"model_type\": \"sklearn.GradientBoostingClassifier\",\n",
        "    },\n",
        ")\n",
        "\n",
        "endpoint = ml_client.online_endpoints.begin_create_or_update(endpoint).result()\n",
        "\n",
        "print(f\"Endpoint {endpoint.name} provisioning state: {endpoint.provisioning_state}\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Endpoint credit-endpoint-7c595fb9 provisioning state: Succeeded\n"
        }
      ],
      "execution_count": 33,
      "metadata": {
        "name": "endpoint",
        "gather": {
          "logged": 1720591584330
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "エンドポイントを作成したら、以下のようにして情報を取得できます。"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "endpoint = ml_client.online_endpoints.get(name=online_endpoint_name)\n",
        "\n",
        "print(\n",
        "    f'Endpoint \"{endpoint.name}\" with provisioning state \"{endpoint.provisioning_state}\" is retrieved'\n",
        ")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Endpoint \"credit-endpoint-7c595fb9\" with provisioning state \"Succeeded\" is retrieved\n"
        }
      ],
      "execution_count": 34,
      "metadata": {
        "name": "retrieve_endpoint",
        "gather": {
          "logged": 1720591584777
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## モデルをエンドポイントにデプロイする\n",
        "\n",
        "エンドポイントが作成されたら、エントリースクリプトを使用してモデルをデプロイします。各エンドポイントには複数のデプロイメントを持つことができます。これらのデプロイメントへのトラフィックの振り分けは、ルールを使用して指定できます。ここでは、すべての受信トラフィックを処理する単一のデプロイメントを作成します。デプロイメントには、任意のカラー名（例：*blue*、*green*、*red*）を選択します。\n",
        "\n",
        "登録されたモデルの最新バージョンを確認するには、Azure ML Studioの**モデル**ページを確認することができます。あるいは、以下のコードで最新バージョン番号を取得することもできます。"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's pick the latest version of the model\n",
        "latest_model_version = max(\n",
        "    [int(m.version) for m in ml_client.models.list(name=registered_model_name)]\n",
        ")"
      ],
      "outputs": [],
      "execution_count": 35,
      "metadata": {
        "name": "latest_model_version",
        "gather": {
          "logged": 1720591590288
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "モデルの最新バージョンをデプロイします。\n",
        "\n",
        "> [!NOTE]\n",
        "> Expect this deployment to take approximately 6 to 8 minutes."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# picking the model to deploy. Here we use the latest version of our registered model\n",
        "model = ml_client.models.get(name=registered_model_name, version=latest_model_version)\n",
        "\n",
        "\n",
        "# create an online deployment.\n",
        "blue_deployment = ManagedOnlineDeployment(\n",
        "    name=\"blue\",\n",
        "    endpoint_name=online_endpoint_name,\n",
        "    model=model,\n",
        "    instance_type=\"Standard_DS3_v2\",\n",
        "    instance_count=1,\n",
        ")\n",
        "\n",
        "blue_deployment = ml_client.begin_create_or_update(blue_deployment).result()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "Check: endpoint credit-endpoint-7c595fb9 exists\n"
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "............................................................................................................"
        }
      ],
      "execution_count": 36,
      "metadata": {
        "name": "blue_deployment",
        "gather": {
          "logged": 1720592147598
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "### サンプルクエリでテストする\n",
        "\n",
        "モデルがエンドポイントにデプロイされたので、推論を実行できます。\n",
        "\n",
        "スコアスクリプトのrunメソッドで期待される形式に従って、サンプルリクエストファイルを作成します。"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "deploy_dir = \"./deploy\"\n",
        "os.makedirs(deploy_dir, exist_ok=True)"
      ],
      "outputs": [],
      "execution_count": 37,
      "metadata": {
        "name": "deploy_dir",
        "gather": {
          "logged": 1720592292756
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile {deploy_dir}/sample-request.json\n",
        "{\n",
        "  \"input_data\": {\n",
        "    \"columns\": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],\n",
        "    \"index\": [0, 1],\n",
        "    \"data\": [\n",
        "            [20000,2,2,1,24,2,2,-1,-1,-2,-2,3913,3102,689,0,0,0,0,689,0,0,0,0],\n",
        "            [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8]\n",
        "        ]\n",
        "  }\n",
        "}"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Writing ./deploy/sample-request.json\n"
        }
      ],
      "execution_count": 38,
      "metadata": {
        "name": "write_sample"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# test the blue deployment with some sample data\n",
        "ml_client.online_endpoints.invoke(\n",
        "    endpoint_name=online_endpoint_name,\n",
        "    request_file=\"./deploy/sample-request.json\",\n",
        "    deployment_name=\"blue\",\n",
        ")"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 39,
          "data": {
            "text/plain": "'[1, 0]'"
          },
          "metadata": {}
        }
      ],
      "execution_count": 39,
      "metadata": {
        "name": "test",
        "gather": {
          "logged": 1720592297687
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## リソースのクリーンアップ\n",
        "\n",
        "エンドポイントを使用しない場合は、リソースの利用を停止するためにエンドポイントを削除します。削除する前に、他のデプロイメントがエンドポイントを使用していないことを確認してください。\n",
        "\n",
        "> [!NOTE]\n",
        "> Expect this step to take approximately 6 to 8 minutes."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "ml_client.online_endpoints.begin_delete(name=online_endpoint_name)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 40,
          "data": {
            "text/plain": "<azure.core.polling._poller.LROPoller at 0x7fd25c290610>"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "..................................................................................................."
        }
      ],
      "execution_count": 40,
      "metadata": {
        "name": "delete_endpoint",
        "gather": {
          "logged": 1720593329916
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## Next Steps\n",
        "\n",
        "Learn about creating a multi step pipeline for this script [Create production ML pipelines in a Jupyter notebook](https://github.com/Azure/azureml-examples/blob/main/tutorials/e2e-ds-experience/e2e-ml-workflow.ipynb)."
      ],
      "metadata": {}
    }
  ],
  "metadata": {
    "orig_nbformat": 4,
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python310-sdkv2"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.14",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernelspec": {
      "name": "python310-sdkv2",
      "language": "python",
      "display_name": "Python 3.10 - SDK v2"
    },
    "categories": [
      "SDK v2",
      "tutorials"
    ],
    "description": {
      "description": "Learn how a data scientist uses Azure Machine Learning (Azure ML) to train a model, then use the model for prediction. This tutorial will help you become familiar with the core concepts of Azure ML and their most common usage."
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}